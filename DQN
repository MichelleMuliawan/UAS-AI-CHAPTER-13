# Importing the libraries
import numpy as np

# IMPLEMENTING DEEP Q-LEARNING WITH EXPERIENCE REPLAY
class Dqn(object):
    def _init_(self, max_memory=100, discount=0.9):
        self.memory = list()
        self.max_memory = max_memory
        self.discount = discount

    def remember(self, transition, game_over):
        self.memory.append([transition, game_over])
        if len(self.memory) > self.max_memory:
            del self.memory[0]

    def get_batch(self, model, batch_size=10):
        len_memory = len(self.memory)
        inputs = np.zeros((min(len_memory, batch_size), *self.memory[0][0][0].shape))
        targets = np.zeros((min(len_memory, batch_size), model.output_shape[-1]))

        for i, idx in enumerate(np.random.randint(0, len_memory, size=min(len_memory, batch_size))):
            current_state, action, reward, next_state = self.memory[idx][0]
            game_over = self.memory[idx][1]

            inputs[i] = current_state
            targets[i] = model.predict(current_state)[0]

            Q_sa = np.max(model.predict(next_state)[0])

            if game_over:
                targets[i, action] = reward
            else:
                targets[i, action] = reward + self.discount * Q_sa

        return inputs, targets
